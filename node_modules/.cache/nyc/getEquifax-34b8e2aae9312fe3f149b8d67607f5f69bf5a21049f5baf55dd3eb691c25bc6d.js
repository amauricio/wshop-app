function cov_1u311xnudu(){var path="/vagrant/continuum/core/src/modules/evaluation/middlewares/per/v1/equifax/getEquifax.js";var hash="8b4a6c05fec1374a3f0bc86cb62f704e8c37cc54";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/vagrant/continuum/core/src/modules/evaluation/middlewares/per/v1/equifax/getEquifax.js",statementMap:{"0":{start:{line:3,column:4},end:{line:3,column:89}},"1":{start:{line:4,column:31},end:{line:4,column:109}},"2":{start:{line:5,column:18},end:{line:5,column:38}},"3":{start:{line:6,column:15},end:{line:6,column:32}},"4":{start:{line:8,column:0},end:{line:59,column:2}},"5":{start:{line:8,column:42},end:{line:59,column:1}},"6":{start:{line:9,column:19},end:{line:9,column:22}},"7":{start:{line:10,column:52},end:{line:10,column:77}},"8":{start:{line:11,column:22},end:{line:13,column:4}},"9":{start:{line:14,column:2},end:{line:14,column:108}},"10":{start:{line:14,column:20},end:{line:14,column:108}},"11":{start:{line:15,column:40},end:{line:15,column:59}},"12":{start:{line:17,column:54},end:{line:17,column:58}},"13":{start:{line:18,column:26},end:{line:26,column:4}},"14":{start:{line:30,column:2},end:{line:55,column:3}},"15":{start:{line:31,column:4},end:{line:31,column:43}},"16":{start:{line:32,column:4},end:{line:32,column:103}},"17":{start:{line:33,column:4},end:{line:33,column:18}},"18":{start:{line:35,column:4},end:{line:35,column:19}},"19":{start:{line:36,column:4},end:{line:36,column:53}},"20":{start:{line:38,column:32},end:{line:38,column:90}},"21":{start:{line:40,column:4},end:{line:54,column:5}},"22":{start:{line:41,column:40},end:{line:47,column:8}},"23":{start:{line:49,column:6},end:{line:51,column:7}},"24":{start:{line:50,column:8},end:{line:50,column:51}},"25":{start:{line:53,column:6},end:{line:53,column:62}},"26":{start:{line:56,column:26},end:{line:56,column:60}},"27":{start:{line:58,column:2},end:{line:58,column:59}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:8,column:17},end:{line:8,column:18}},loc:{start:{line:8,column:42},end:{line:59,column:1}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:8,column:42},end:{line:8,column:43}},loc:{start:{line:8,column:68},end:{line:59,column:1}},line:8}},branchMap:{"0":{loc:{start:{line:14,column:2},end:{line:14,column:108}},type:"if",locations:[{start:{line:14,column:2},end:{line:14,column:108}},{start:{line:14,column:2},end:{line:14,column:108}}],line:14},"1":{loc:{start:{line:30,column:2},end:{line:55,column:3}},type:"if",locations:[{start:{line:30,column:2},end:{line:55,column:3}},{start:{line:30,column:2},end:{line:55,column:3}}],line:30},"2":{loc:{start:{line:49,column:6},end:{line:51,column:7}},type:"if",locations:[{start:{line:49,column:6},end:{line:51,column:7}},{start:{line:49,column:6},end:{line:51,column:7}}],line:49}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"8b4a6c05fec1374a3f0bc86cb62f704e8c37cc54"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1u311xnudu=function(){return actualCoverage;};}return actualCoverage;}cov_1u311xnudu();const{getResponseFromEquifaxApi}=(cov_1u311xnudu().s[0]++,require('modules/evaluation/middlewares/per/v1/equifax/fn/getResponseFromEquifaxApi'));const{getDataFromEquifax}=(cov_1u311xnudu().s[1]++,require('modules/evaluation/middlewares/per/v1/equifax/fn/getDataFromEquifax'));const Sequelize=(cov_1u311xnudu().s[2]++,require('sequelize'));const moment=(cov_1u311xnudu().s[3]++,require('moment'));cov_1u311xnudu().s[4]++;module.exports=(dependencies,stage)=>{cov_1u311xnudu().f[0]++;cov_1u311xnudu().s[5]++;return async(req,res,next)=>{cov_1u311xnudu().f[1]++;const{body}=(cov_1u311xnudu().s[6]++,req);const{EquifaxApiPgModel,CoreSettingPgModel}=(cov_1u311xnudu().s[7]++,dependencies.commonModels);const coreSetting=(cov_1u311xnudu().s[8]++,await CoreSettingPgModel.findOne({where:{type:'EQUIFAX_EVALUATION_CACHE_DAYS_AMOUNT_PERU'}}));cov_1u311xnudu().s[9]++;if(!coreSetting){cov_1u311xnudu().b[0][0]++;cov_1u311xnudu().s[10]++;throw new Error('Core setting for EQUIFAX_EVALUATION_CACHE_DAYS_AMOUNT_PERU not found');}else{cov_1u311xnudu().b[0][1]++;}const{previousEvaluationDaysAgo}=(cov_1u311xnudu().s[11]++,coreSetting.setting);const{identifierValue,identifierType,income}=(cov_1u311xnudu().s[12]++,body);const equifaxApiCache=(cov_1u311xnudu().s[13]++,await EquifaxApiPgModel.findOne({where:{identifierValue,identifierType,equifaxResponseCachedAt:{[Sequelize.Op.gte]:moment().subtract(previousEvaluationDaysAgo,'days').toDate()}}}));let response;let cached;let expiresOn;cov_1u311xnudu().s[14]++;if(equifaxApiCache){cov_1u311xnudu().b[1][0]++;cov_1u311xnudu().s[15]++;response=equifaxApiCache.rawResponse;cov_1u311xnudu().s[16]++;expiresOn=moment(equifaxApiCache.equifaxResponseCachedAt).add(previousEvaluationDaysAgo,'days');cov_1u311xnudu().s[17]++;cached=true;}else{cov_1u311xnudu().b[1][1]++;cov_1u311xnudu().s[18]++;cached=false;cov_1u311xnudu().s[19]++;response=await getResponseFromEquifaxApi(body);const preparedEquifaxData=(cov_1u311xnudu().s[20]++,{identifierType,identifierValue,rawResponse:response});cov_1u311xnudu().s[21]++;try{const[EquifaxApiData,created]=(cov_1u311xnudu().s[22]++,await EquifaxApiPgModel.findOrCreate({where:{identifierType,identifierValue},defaults:preparedEquifaxData}));cov_1u311xnudu().s[23]++;if(!created){cov_1u311xnudu().b[2][0]++;cov_1u311xnudu().s[24]++;EquifaxApiData.update(preparedEquifaxData);}else{cov_1u311xnudu().b[2][1]++;}}catch(err){cov_1u311xnudu().s[25]++;throw new Error(`persistEquifaxData (${err.message}) `);}}const dataFromEquifax=(cov_1u311xnudu().s[26]++,await getDataFromEquifax(response));cov_1u311xnudu().s[27]++;res.json({cached,expiresOn,result:dataFromEquifax});};};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldEVxdWlmYXguanMiXSwibmFtZXMiOlsiZ2V0UmVzcG9uc2VGcm9tRXF1aWZheEFwaSIsInJlcXVpcmUiLCJnZXREYXRhRnJvbUVxdWlmYXgiLCJTZXF1ZWxpemUiLCJtb21lbnQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVwZW5kZW5jaWVzIiwic3RhZ2UiLCJyZXEiLCJyZXMiLCJuZXh0IiwiYm9keSIsIkVxdWlmYXhBcGlQZ01vZGVsIiwiQ29yZVNldHRpbmdQZ01vZGVsIiwiY29tbW9uTW9kZWxzIiwiY29yZVNldHRpbmciLCJmaW5kT25lIiwid2hlcmUiLCJ0eXBlIiwiRXJyb3IiLCJwcmV2aW91c0V2YWx1YXRpb25EYXlzQWdvIiwic2V0dGluZyIsImlkZW50aWZpZXJWYWx1ZSIsImlkZW50aWZpZXJUeXBlIiwiaW5jb21lIiwiZXF1aWZheEFwaUNhY2hlIiwiZXF1aWZheFJlc3BvbnNlQ2FjaGVkQXQiLCJPcCIsImd0ZSIsInN1YnRyYWN0IiwidG9EYXRlIiwicmVzcG9uc2UiLCJjYWNoZWQiLCJleHBpcmVzT24iLCJyYXdSZXNwb25zZSIsImFkZCIsInByZXBhcmVkRXF1aWZheERhdGEiLCJFcXVpZmF4QXBpRGF0YSIsImNyZWF0ZWQiLCJmaW5kT3JDcmVhdGUiLCJkZWZhdWx0cyIsInVwZGF0ZSIsImVyciIsIm1lc3NhZ2UiLCJkYXRhRnJvbUVxdWlmYXgiLCJqc29uIiwicmVzdWx0Il0sIm1hcHBpbmdzIjoiOHVHQWVZOzJGQWZaLEtBQU0sQ0FDSkEseUJBREksMkJBRUZDLE9BQU8sQ0FBQyw0RUFBRCxDQUZMLENBQU4sQ0FHQSxLQUFNLENBQUVDLGtCQUFGLDJCQUF5QkQsT0FBTyxDQUFDLHFFQUFELENBQWhDLENBQU4sQ0FDQSxLQUFNRSxDQUFBQSxTQUFTLDBCQUFHRixPQUFPLENBQUMsV0FBRCxDQUFWLENBQWYsQ0FDQSxLQUFNRyxDQUFBQSxNQUFNLDBCQUFHSCxPQUFPLENBQUMsUUFBRCxDQUFWLENBQVosQyx3QkFFQUksTUFBTSxD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b3VyY2VzQ29udGVudCI6WyJjb25zdCB7XHJcbiAgZ2V0UmVzcG9uc2VGcm9tRXF1aWZheEFwaSxcclxufSA9IHJlcXVpcmUoJ21vZHVsZXMvZXZhbHVhdGlvbi9taWRkbGV3YXJlcy9wZXIvdjEvZXF1aWZheC9mbi9nZXRSZXNwb25zZUZyb21FcXVpZmF4QXBpJyk7XHJcbmNvbnN0IHsgZ2V0RGF0YUZyb21FcXVpZmF4IH0gPSByZXF1aXJlKCdtb2R1bGVzL2V2YWx1YXRpb24vbWlkZGxld2FyZXMvcGVyL3YxL2VxdWlmYXgvZm4vZ2V0RGF0YUZyb21FcXVpZmF4Jyk7XHJcbmNvbnN0IFNlcXVlbGl6ZSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpO1xyXG5jb25zdCBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKGRlcGVuZGVuY2llcywgc3RhZ2UpID0+IGFzeW5jIChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gIGNvbnN0IHsgYm9keSB9ID0gcmVxO1xyXG4gIGNvbnN0IHsgRXF1aWZheEFwaVBnTW9kZWwsIENvcmVTZXR0aW5nUGdNb2RlbCB9ID0gZGVwZW5kZW5jaWVzLmNvbW1vbk1vZGVscztcclxuICBjb25zdCBjb3JlU2V0dGluZyA9IGF3YWl0IENvcmVTZXR0aW5nUGdNb2RlbC5maW5kT25lKHtcclxuICAgIHdoZXJlOiB7IHR5cGU6ICdFUVVJRkFYX0VWQUxVQVRJT05fQ0FDSEVfREFZU19BTU9VTlRfUEVSVScgfSxcclxuICB9KTtcclxuICBpZiAoIWNvcmVTZXR0aW5nKSB0aHJvdyBuZXcgRXJyb3IoJ0NvcmUgc2V0dGluZyBmb3IgRVFVSUZBWF9FVkFMVUFUSU9OX0NBQ0hFX0RBWVNfQU1PVU5UX1BFUlUgbm90IGZvdW5kJyk7XHJcbiAgY29uc3QgeyBwcmV2aW91c0V2YWx1YXRpb25EYXlzQWdvIH0gPSBjb3JlU2V0dGluZy5zZXR0aW5nO1xyXG5cclxuICBjb25zdCB7IGlkZW50aWZpZXJWYWx1ZSwgaWRlbnRpZmllclR5cGUsIGluY29tZSB9ID0gYm9keTtcclxuICBjb25zdCBlcXVpZmF4QXBpQ2FjaGUgPSBhd2FpdCBFcXVpZmF4QXBpUGdNb2RlbC5maW5kT25lKHtcclxuICAgIHdoZXJlOiB7XHJcbiAgICAgIGlkZW50aWZpZXJWYWx1ZSxcclxuICAgICAgaWRlbnRpZmllclR5cGUsXHJcbiAgICAgIGVxdWlmYXhSZXNwb25zZUNhY2hlZEF0OiB7XHJcbiAgICAgICAgW1NlcXVlbGl6ZS5PcC5ndGVdOiBtb21lbnQoKS5zdWJ0cmFjdChwcmV2aW91c0V2YWx1YXRpb25EYXlzQWdvLCAnZGF5cycpLnRvRGF0ZSgpLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICB9KTtcclxuICBsZXQgcmVzcG9uc2U7XHJcbiAgbGV0IGNhY2hlZDtcclxuICBsZXQgZXhwaXJlc09uO1xyXG4gIGlmIChlcXVpZmF4QXBpQ2FjaGUpIHtcclxuICAgIHJlc3BvbnNlID0gZXF1aWZheEFwaUNhY2hlLnJhd1Jlc3BvbnNlO1xyXG4gICAgZXhwaXJlc09uID0gbW9tZW50KGVxdWlmYXhBcGlDYWNoZS5lcXVpZmF4UmVzcG9uc2VDYWNoZWRBdCkuYWRkKHByZXZpb3VzRXZhbHVhdGlvbkRheXNBZ28sICdkYXlzJyk7XHJcbiAgICBjYWNoZWQgPSB0cnVlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjYWNoZWQgPSBmYWxzZTtcclxuICAgIHJlc3BvbnNlID0gYXdhaXQgZ2V0UmVzcG9uc2VGcm9tRXF1aWZheEFwaShib2R5KTtcclxuXHJcbiAgICBjb25zdCBwcmVwYXJlZEVxdWlmYXhEYXRhID0geyBpZGVudGlmaWVyVHlwZSwgaWRlbnRpZmllclZhbHVlLCByYXdSZXNwb25zZTogcmVzcG9uc2UgfTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBbRXF1aWZheEFwaURhdGEsIGNyZWF0ZWRdID0gYXdhaXQgRXF1aWZheEFwaVBnTW9kZWwuZmluZE9yQ3JlYXRlKHtcclxuICAgICAgICB3aGVyZToge1xyXG4gICAgICAgICAgaWRlbnRpZmllclR5cGUsXHJcbiAgICAgICAgICBpZGVudGlmaWVyVmFsdWUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWZhdWx0czogcHJlcGFyZWRFcXVpZmF4RGF0YSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoIWNyZWF0ZWQpIHtcclxuICAgICAgICBFcXVpZmF4QXBpRGF0YS51cGRhdGUocHJlcGFyZWRFcXVpZmF4RGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHBlcnNpc3RFcXVpZmF4RGF0YSAoJHtlcnIubWVzc2FnZX0pIGApO1xyXG4gICAgfVxyXG4gIH1cclxuICBjb25zdCBkYXRhRnJvbUVxdWlmYXggPSBhd2FpdCBnZXREYXRhRnJvbUVxdWlmYXgocmVzcG9uc2UpO1xyXG5cclxuICByZXMuanNvbih7IGNhY2hlZCwgZXhwaXJlc09uLCByZXN1bHQ6IGRhdGFGcm9tRXF1aWZheCB9KTtcclxufTtcclxuIl19