function cov_28nn9g6i67(){var path="/vagrant/continuum/core/src/common/models/CoreSetting.js";var hash="c839dddffcc24cf9d6442067612655826adfd7a2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/vagrant/continuum/core/src/common/models/CoreSetting.js",statementMap:{"0":{start:{line:1,column:18},end:{line:1,column:38}},"1":{start:{line:3,column:0},end:{line:28,column:2}},"2":{start:{line:14,column:2},end:{line:26,column:4}},"3":{start:{line:27,column:2},end:{line:27,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:3,column:17},end:{line:3,column:18}},loc:{start:{line:3,column:43},end:{line:28,column:1}},line:3},"1":{name:"(anonymous_1)",decl:{start:{line:10,column:4},end:{line:10,column:5}},loc:{start:{line:10,column:29},end:{line:12,column:5}},line:10}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0},f:{"0":0,"1":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c839dddffcc24cf9d6442067612655826adfd7a2"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_28nn9g6i67=function(){return actualCoverage;};}return actualCoverage;}cov_28nn9g6i67();const{Model}=(cov_28nn9g6i67().s[0]++,require('sequelize'));cov_28nn9g6i67().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_28nn9g6i67().f[0]++;class CoreSetting extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){// define association here
cov_28nn9g6i67().f[1]++;}}cov_28nn9g6i67().s[2]++;CoreSetting.init({type:DataTypes.STRING,setting:DataTypes.JSONB},{sequelize,modelName:'CoreSetting',tableName:'CoreSettings',timestamps:true,paranoid:true});cov_28nn9g6i67().s[3]++;return CoreSetting;};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvcmVTZXR0aW5nLmpzIl0sIm5hbWVzIjpbIk1vZGVsIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJEYXRhVHlwZXMiLCJDb3JlU2V0dGluZyIsImFzc29jaWF0ZSIsIm1vZGVscyIsImluaXQiLCJ0eXBlIiwiU1RSSU5HIiwic2V0dGluZyIsIkpTT05CIiwibW9kZWxOYW1lIiwidGFibGVOYW1lIiwidGltZXN0YW1wcyIsInBhcmFub2lkIl0sIm1hcHBpbmdzIjoid25DQWVZOzJGQWZaLEtBQU0sQ0FBRUEsS0FBRiwyQkFBWUMsT0FBTyxDQUFDLFdBQUQsQ0FBbkIsQ0FBTixDLHdCQUVBQyxNQUFNLENBQUNDLE9BQVAsQ0FBaUIsQ0FBQ0MsU0FBRCxDQUFZQyxTQUFaLEdBQTBCLHlCQUN6QyxLQUFNQyxDQUFBQSxXQUFOLFFBQTBCTixDQUFBQSxLQUFNLENBQzlCO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FDSSxNQUFPTyxDQUFBQSxTQUFQLENBQWlCQyxNQUFqQixDQUF5QixDQUN2QjtBQUR1Qix3QkFFeEIsQ0FSNkIsQ0FEUyx3QkFXekNGLFdBQVcsQ0FBQ0csSUFBWixDQUNFLENBQ0VDLElBQUksQ0FBRUwsU0FBUyxDQUFDTSxNQURsQixDQUVFQyxPQUFPLENBQUVQLFNBQVMsQ0FBQ1EsS0FGckIsQ0FERixDQUtFLENBQ0VULFNBREYsQ0FFRVUsU0FBUyxDQUFFLGFBRmIsQ0FHRUMsU0FBUyxDQUFFLGNBSGIsQ0FJRUMsVUFBVSxDQUFFLElBSmQsQ0FLRUMsUUFBUSxDQUFFLElBTFosQ0FMRixFQVh5Qyx3QkF3QnpDLE1BQU9YLENBQUFBLFdBQVAsQ0FDRCxDQXpCRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgTW9kZWwgfSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoc2VxdWVsaXplLCBEYXRhVHlwZXMpID0+IHtcclxuICBjbGFzcyBDb3JlU2V0dGluZyBleHRlbmRzIE1vZGVsIHtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIG1ldGhvZCBmb3IgZGVmaW5pbmcgYXNzb2NpYXRpb25zLlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgbm90IGEgcGFydCBvZiBTZXF1ZWxpemUgbGlmZWN5Y2xlLlxyXG4gICAgICogVGhlIGBtb2RlbHMvaW5kZXhgIGZpbGUgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIGF1dG9tYXRpY2FsbHkuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhc3NvY2lhdGUobW9kZWxzKSB7XHJcbiAgICAgIC8vIGRlZmluZSBhc3NvY2lhdGlvbiBoZXJlXHJcbiAgICB9XHJcbiAgfVxyXG4gIENvcmVTZXR0aW5nLmluaXQoXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICAgIHNldHRpbmc6IERhdGFUeXBlcy5KU09OQixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHNlcXVlbGl6ZSxcclxuICAgICAgbW9kZWxOYW1lOiAnQ29yZVNldHRpbmcnLFxyXG4gICAgICB0YWJsZU5hbWU6ICdDb3JlU2V0dGluZ3MnLFxyXG4gICAgICB0aW1lc3RhbXBzOiB0cnVlLFxyXG4gICAgICBwYXJhbm9pZDogdHJ1ZSxcclxuICAgIH0sXHJcbiAgKTtcclxuICByZXR1cm4gQ29yZVNldHRpbmc7XHJcbn07XHJcbiJdfQ==