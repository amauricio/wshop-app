function cov_28n1mygq4q(){var path="/vagrant/continuum/core/src/common/models/VehicleType.js";var hash="967314d09fd691622c9149b563c9380eb23923bf";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/vagrant/continuum/core/src/common/models/VehicleType.js",statementMap:{"0":{start:{line:1,column:18},end:{line:1,column:38}},"1":{start:{line:3,column:0},end:{line:27,column:2}},"2":{start:{line:14,column:2},end:{line:25,column:4}},"3":{start:{line:26,column:2},end:{line:26,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:3,column:17},end:{line:3,column:18}},loc:{start:{line:3,column:43},end:{line:27,column:1}},line:3},"1":{name:"(anonymous_1)",decl:{start:{line:10,column:4},end:{line:10,column:5}},loc:{start:{line:10,column:29},end:{line:12,column:5}},line:10}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0},f:{"0":0,"1":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"967314d09fd691622c9149b563c9380eb23923bf"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_28n1mygq4q=function(){return actualCoverage;};}return actualCoverage;}cov_28n1mygq4q();const{Model}=(cov_28n1mygq4q().s[0]++,require('sequelize'));cov_28n1mygq4q().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_28n1mygq4q().f[0]++;class VehicleType extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){// define association here
cov_28n1mygq4q().f[1]++;}}cov_28n1mygq4q().s[2]++;VehicleType.init({description:DataTypes.STRING,cod:DataTypes.STRING},{sequelize,modelName:'VehicleType',timestamps:true,paranoid:true});cov_28n1mygq4q().s[3]++;return VehicleType;};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZlaGljbGVUeXBlLmpzIl0sIm5hbWVzIjpbIk1vZGVsIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJEYXRhVHlwZXMiLCJWZWhpY2xlVHlwZSIsImFzc29jaWF0ZSIsIm1vZGVscyIsImluaXQiLCJkZXNjcmlwdGlvbiIsIlNUUklORyIsImNvZCIsIm1vZGVsTmFtZSIsInRpbWVzdGFtcHMiLCJwYXJhbm9pZCJdLCJtYXBwaW5ncyI6InduQ0FlWTsyRkFmWixLQUFNLENBQUVBLEtBQUYsMkJBQVlDLE9BQU8sQ0FBQyxXQUFELENBQW5CLENBQU4sQyx3QkFFQUMsTUFBTSxDQUFDQyxPQUFQLENBQWlCLENBQUNDLFNBQUQsQ0FBWUMsU0FBWixHQUEwQix5QkFDekMsS0FBTUMsQ0FBQUEsV0FBTixRQUEwQk4sQ0FBQUEsS0FBTSxDQUM5QjtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQ0ksTUFBT08sQ0FBQUEsU0FBUCxDQUFpQkMsTUFBakIsQ0FBeUIsQ0FDdkI7QUFEdUIsd0JBRXhCLENBUjZCLENBRFMsd0JBV3pDRixXQUFXLENBQUNHLElBQVosQ0FDRSxDQUNFQyxXQUFXLENBQUVMLFNBQVMsQ0FBQ00sTUFEekIsQ0FFRUMsR0FBRyxDQUFFUCxTQUFTLENBQUNNLE1BRmpCLENBREYsQ0FLRSxDQUNFUCxTQURGLENBRUVTLFNBQVMsQ0FBRSxhQUZiLENBR0VDLFVBQVUsQ0FBRSxJQUhkLENBSUVDLFFBQVEsQ0FBRSxJQUpaLENBTEYsRUFYeUMsd0JBdUJ6QyxNQUFPVCxDQUFBQSxXQUFQLENBQ0QsQ0F4QkQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IE1vZGVsIH0gPSByZXF1aXJlKCdzZXF1ZWxpemUnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XHJcbiAgY2xhc3MgVmVoaWNsZVR5cGUgZXh0ZW5kcyBNb2RlbCB7XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBtZXRob2QgZm9yIGRlZmluaW5nIGFzc29jaWF0aW9ucy5cclxuICAgICAqIFRoaXMgbWV0aG9kIGlzIG5vdCBhIHBhcnQgb2YgU2VxdWVsaXplIGxpZmVjeWNsZS5cclxuICAgICAqIFRoZSBgbW9kZWxzL2luZGV4YCBmaWxlIHdpbGwgY2FsbCB0aGlzIG1ldGhvZCBhdXRvbWF0aWNhbGx5LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXNzb2NpYXRlKG1vZGVscykge1xyXG4gICAgICAvLyBkZWZpbmUgYXNzb2NpYXRpb24gaGVyZVxyXG4gICAgfVxyXG4gIH1cclxuICBWZWhpY2xlVHlwZS5pbml0KFxyXG4gICAge1xyXG4gICAgICBkZXNjcmlwdGlvbjogRGF0YVR5cGVzLlNUUklORyxcclxuICAgICAgY29kOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgc2VxdWVsaXplLFxyXG4gICAgICBtb2RlbE5hbWU6ICdWZWhpY2xlVHlwZScsXHJcbiAgICAgIHRpbWVzdGFtcHM6IHRydWUsXHJcbiAgICAgIHBhcmFub2lkOiB0cnVlLFxyXG4gICAgfSxcclxuICApO1xyXG4gIHJldHVybiBWZWhpY2xlVHlwZTtcclxufTtcclxuIl19