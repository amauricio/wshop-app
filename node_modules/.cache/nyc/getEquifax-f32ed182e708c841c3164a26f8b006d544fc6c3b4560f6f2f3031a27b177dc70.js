function cov_1u311xnudu(){var path="/vagrant/continuum/core/src/modules/evaluation/middlewares/per/v1/equifax/getEquifax.js";var hash="3ea855f8c73748d591bedf2d7d9c470a13bd0332";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/vagrant/continuum/core/src/modules/evaluation/middlewares/per/v1/equifax/getEquifax.js",statementMap:{"0":{start:{line:1,column:38},end:{line:1,column:123}},"1":{start:{line:2,column:31},end:{line:2,column:109}},"2":{start:{line:3,column:18},end:{line:3,column:38}},"3":{start:{line:4,column:15},end:{line:4,column:32}},"4":{start:{line:6,column:0},end:{line:60,column:1}},"5":{start:{line:6,column:42},end:{line:60,column:1}},"6":{start:{line:8,column:19},end:{line:8,column:22}},"7":{start:{line:9,column:54},end:{line:9,column:79}},"8":{start:{line:10,column:24},end:{line:12,column:6}},"9":{start:{line:13,column:4},end:{line:13,column:110}},"10":{start:{line:13,column:22},end:{line:13,column:110}},"11":{start:{line:14,column:42},end:{line:14,column:61}},"12":{start:{line:16,column:54},end:{line:16,column:58}},"13":{start:{line:17,column:28},end:{line:26,column:8}},"14":{start:{line:30,column:4},end:{line:55,column:5}},"15":{start:{line:31,column:8},end:{line:31,column:47}},"16":{start:{line:32,column:8},end:{line:32,column:107}},"17":{start:{line:33,column:8},end:{line:33,column:22}},"18":{start:{line:35,column:8},end:{line:35,column:23}},"19":{start:{line:36,column:8},end:{line:36,column:57}},"20":{start:{line:38,column:37},end:{line:38,column:93}},"21":{start:{line:40,column:8},end:{line:54,column:9}},"22":{start:{line:41,column:46},end:{line:47,column:14}},"23":{start:{line:49,column:12},end:{line:51,column:13}},"24":{start:{line:50,column:16},end:{line:50,column:59}},"25":{start:{line:53,column:12},end:{line:53,column:68}},"26":{start:{line:56,column:28},end:{line:56,column:62}},"27":{start:{line:59,column:4},end:{line:59,column:57}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:17},end:{line:6,column:18}},loc:{start:{line:6,column:42},end:{line:60,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:6,column:42},end:{line:6,column:43}},loc:{start:{line:6,column:68},end:{line:60,column:1}},line:6}},branchMap:{"0":{loc:{start:{line:13,column:4},end:{line:13,column:110}},type:"if",locations:[{start:{line:13,column:4},end:{line:13,column:110}},{start:{line:13,column:4},end:{line:13,column:110}}],line:13},"1":{loc:{start:{line:30,column:4},end:{line:55,column:5}},type:"if",locations:[{start:{line:30,column:4},end:{line:55,column:5}},{start:{line:30,column:4},end:{line:55,column:5}}],line:30},"2":{loc:{start:{line:49,column:12},end:{line:51,column:13}},type:"if",locations:[{start:{line:49,column:12},end:{line:51,column:13}},{start:{line:49,column:12},end:{line:51,column:13}}],line:49}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3ea855f8c73748d591bedf2d7d9c470a13bd0332"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1u311xnudu=function(){return actualCoverage;};}return actualCoverage;}cov_1u311xnudu();const{getResponseFromEquifaxApi}=(cov_1u311xnudu().s[0]++,require('modules/evaluation/middlewares/per/v1/equifax/fn/getResponseFromEquifaxApi'));const{getDataFromEquifax}=(cov_1u311xnudu().s[1]++,require('modules/evaluation/middlewares/per/v1/equifax/fn/getDataFromEquifax'));const Sequelize=(cov_1u311xnudu().s[2]++,require('sequelize'));const moment=(cov_1u311xnudu().s[3]++,require('moment'));cov_1u311xnudu().s[4]++;module.exports=(dependencies,stage)=>{cov_1u311xnudu().f[0]++;cov_1u311xnudu().s[5]++;return async(req,res,next)=>{cov_1u311xnudu().f[1]++;const{body}=(cov_1u311xnudu().s[6]++,req);const{EquifaxApiPgModel,CoreSettingPgModel}=(cov_1u311xnudu().s[7]++,dependencies.commonModels);const coreSetting=(cov_1u311xnudu().s[8]++,await CoreSettingPgModel.findOne({where:{type:'EQUIFAX_EVALUATION_CACHE_DAYS_AMOUNT_PERU'}}));cov_1u311xnudu().s[9]++;if(!coreSetting){cov_1u311xnudu().b[0][0]++;cov_1u311xnudu().s[10]++;throw new Error('Core setting for EQUIFAX_EVALUATION_CACHE_DAYS_AMOUNT_PERU not found');}else{cov_1u311xnudu().b[0][1]++;}const{previousEvaluationDaysAgo}=(cov_1u311xnudu().s[11]++,coreSetting.setting);const{identifierValue,identifierType,income}=(cov_1u311xnudu().s[12]++,body);const equifaxApiCache=(cov_1u311xnudu().s[13]++,await EquifaxApiPgModel.findOne({where:{identifierValue,identifierType,equifaxResponseCachedAt:{[Sequelize.Op.gte]:moment().subtract(previousEvaluationDaysAgo,'days').toDate()}}}));let response;let cached;let expiresOn;cov_1u311xnudu().s[14]++;if(equifaxApiCache){cov_1u311xnudu().b[1][0]++;cov_1u311xnudu().s[15]++;response=equifaxApiCache.rawResponse;cov_1u311xnudu().s[16]++;expiresOn=moment(equifaxApiCache.equifaxResponseCachedAt).add(previousEvaluationDaysAgo,'days');cov_1u311xnudu().s[17]++;cached=true;}else{cov_1u311xnudu().b[1][1]++;cov_1u311xnudu().s[18]++;cached=false;cov_1u311xnudu().s[19]++;response=await getResponseFromEquifaxApi(body);const preparedEquifaxData=(cov_1u311xnudu().s[20]++,{identifierType,identifierValue,rawResponse:response});cov_1u311xnudu().s[21]++;try{const[EquifaxApiData,created]=(cov_1u311xnudu().s[22]++,await EquifaxApiPgModel.findOrCreate({where:{identifierType,identifierValue},defaults:preparedEquifaxData}));cov_1u311xnudu().s[23]++;if(!created){cov_1u311xnudu().b[2][0]++;cov_1u311xnudu().s[24]++;EquifaxApiData.update(preparedEquifaxData);}else{cov_1u311xnudu().b[2][1]++;}}catch(err){cov_1u311xnudu().s[25]++;throw new Error(`persistEquifaxData (${err.message}) `);}}const dataFromEquifax=(cov_1u311xnudu().s[26]++,await getDataFromEquifax(response));cov_1u311xnudu().s[27]++;res.json({cached,expiresOn,result:dataFromEquifax});};};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldEVxdWlmYXguanMiXSwibmFtZXMiOlsiZ2V0UmVzcG9uc2VGcm9tRXF1aWZheEFwaSIsInJlcXVpcmUiLCJnZXREYXRhRnJvbUVxdWlmYXgiLCJTZXF1ZWxpemUiLCJtb21lbnQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVwZW5kZW5jaWVzIiwic3RhZ2UiLCJyZXEiLCJyZXMiLCJuZXh0IiwiYm9keSIsIkVxdWlmYXhBcGlQZ01vZGVsIiwiQ29yZVNldHRpbmdQZ01vZGVsIiwiY29tbW9uTW9kZWxzIiwiY29yZVNldHRpbmciLCJmaW5kT25lIiwid2hlcmUiLCJ0eXBlIiwiRXJyb3IiLCJwcmV2aW91c0V2YWx1YXRpb25EYXlzQWdvIiwic2V0dGluZyIsImlkZW50aWZpZXJWYWx1ZSIsImlkZW50aWZpZXJUeXBlIiwiaW5jb21lIiwiZXF1aWZheEFwaUNhY2hlIiwiZXF1aWZheFJlc3BvbnNlQ2FjaGVkQXQiLCJPcCIsImd0ZSIsInN1YnRyYWN0IiwidG9EYXRlIiwicmVzcG9uc2UiLCJjYWNoZWQiLCJleHBpcmVzT24iLCJyYXdSZXNwb25zZSIsImFkZCIsInByZXBhcmVkRXF1aWZheERhdGEiLCJFcXVpZmF4QXBpRGF0YSIsImNyZWF0ZWQiLCJmaW5kT3JDcmVhdGUiLCJkZWZhdWx0cyIsInVwZGF0ZSIsImVyciIsIm1lc3NhZ2UiLCJkYXRhRnJvbUVxdWlmYXgiLCJqc29uIiwicmVzdWx0Il0sIm1hcHBpbmdzIjoieXZHQWVZOzJGQWZaLEtBQU0sQ0FBRUEseUJBQUYsMkJBQWdDQyxPQUFPLENBQUMsNEVBQUQsQ0FBdkMsQ0FBTixDQUNBLEtBQU0sQ0FBRUMsa0JBQUYsMkJBQXlCRCxPQUFPLENBQUMscUVBQUQsQ0FBaEMsQ0FBTixDQUNBLEtBQU1FLENBQUFBLFNBQVMsMEJBQUdGLE9BQU8sQ0FBQyxXQUFELENBQVYsQ0FBZixDQUNBLEtBQU1HLENBQUFBLE1BQU0sMEJBQUdILE9BQU8sQ0FBQyxRQUFELENBQVYsQ0FBWixDLHdCQUVBSSxNQUFN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InNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZ2V0UmVzcG9uc2VGcm9tRXF1aWZheEFwaSB9ID0gcmVxdWlyZSgnbW9kdWxlcy9ldmFsdWF0aW9uL21pZGRsZXdhcmVzL3Blci92MS9lcXVpZmF4L2ZuL2dldFJlc3BvbnNlRnJvbUVxdWlmYXhBcGknKTtcclxuY29uc3QgeyBnZXREYXRhRnJvbUVxdWlmYXggfSA9IHJlcXVpcmUoJ21vZHVsZXMvZXZhbHVhdGlvbi9taWRkbGV3YXJlcy9wZXIvdjEvZXF1aWZheC9mbi9nZXREYXRhRnJvbUVxdWlmYXgnKTtcclxuY29uc3QgU2VxdWVsaXplID0gcmVxdWlyZSgnc2VxdWVsaXplJyk7XHJcbmNvbnN0IG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoZGVwZW5kZW5jaWVzLCBzdGFnZSkgPT4gYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcblxyXG4gICAgY29uc3Qge2JvZHl9ID0gcmVxO1xyXG4gICAgY29uc3QgeyBFcXVpZmF4QXBpUGdNb2RlbCwgQ29yZVNldHRpbmdQZ01vZGVsIH0gPSBkZXBlbmRlbmNpZXMuY29tbW9uTW9kZWxzO1xyXG4gICAgY29uc3QgY29yZVNldHRpbmcgPSBhd2FpdCBDb3JlU2V0dGluZ1BnTW9kZWwuZmluZE9uZSh7XHJcbiAgICAgICAgd2hlcmU6IHsgdHlwZTogJ0VRVUlGQVhfRVZBTFVBVElPTl9DQUNIRV9EQVlTX0FNT1VOVF9QRVJVJyB9LFxyXG4gICAgfSk7XHJcbiAgICBpZiAoIWNvcmVTZXR0aW5nKSB0aHJvdyBuZXcgRXJyb3IoJ0NvcmUgc2V0dGluZyBmb3IgRVFVSUZBWF9FVkFMVUFUSU9OX0NBQ0hFX0RBWVNfQU1PVU5UX1BFUlUgbm90IGZvdW5kJyk7XHJcbiAgICBjb25zdCB7IHByZXZpb3VzRXZhbHVhdGlvbkRheXNBZ28gfSA9IGNvcmVTZXR0aW5nLnNldHRpbmc7XHJcblxyXG4gICAgY29uc3Qge2lkZW50aWZpZXJWYWx1ZSwgaWRlbnRpZmllclR5cGUsIGluY29tZX0gPSBib2R5O1xyXG4gICAgY29uc3QgZXF1aWZheEFwaUNhY2hlID0gYXdhaXQgRXF1aWZheEFwaVBnTW9kZWwuZmluZE9uZSh7XHJcbiAgICAgICAgd2hlcmU6IHtcclxuICAgICAgICAgIGlkZW50aWZpZXJWYWx1ZSxpZGVudGlmaWVyVHlwZSxcclxuICAgICAgICAgIGVxdWlmYXhSZXNwb25zZUNhY2hlZEF0OiB7XHJcbiAgICAgICAgICAgIFtTZXF1ZWxpemUuT3AuZ3RlXTogbW9tZW50KClcclxuICAgICAgICAgICAgICAuc3VidHJhY3QocHJldmlvdXNFdmFsdWF0aW9uRGF5c0FnbywgJ2RheXMnKVxyXG4gICAgICAgICAgICAgIC50b0RhdGUoKSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgfSk7XHJcbiAgICBsZXQgcmVzcG9uc2U7XHJcbiAgICBsZXQgY2FjaGVkO1xyXG4gICAgbGV0IGV4cGlyZXNPbjtcclxuICAgIGlmIChlcXVpZmF4QXBpQ2FjaGUpe1xyXG4gICAgICAgIHJlc3BvbnNlID0gZXF1aWZheEFwaUNhY2hlLnJhd1Jlc3BvbnNlO1xyXG4gICAgICAgIGV4cGlyZXNPbiA9IG1vbWVudChlcXVpZmF4QXBpQ2FjaGUuZXF1aWZheFJlc3BvbnNlQ2FjaGVkQXQpLmFkZChwcmV2aW91c0V2YWx1YXRpb25EYXlzQWdvLCAnZGF5cycpO1xyXG4gICAgICAgIGNhY2hlZCA9IHRydWU7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgICBjYWNoZWQgPSBmYWxzZTtcclxuICAgICAgICByZXNwb25zZSA9IGF3YWl0IGdldFJlc3BvbnNlRnJvbUVxdWlmYXhBcGkoYm9keSk7XHJcbiAgICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHByZXBhcmVkRXF1aWZheERhdGEgPSAge2lkZW50aWZpZXJUeXBlLCBpZGVudGlmaWVyVmFsdWUsIHJhd1Jlc3BvbnNlOiByZXNwb25zZX07XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IFtFcXVpZmF4QXBpRGF0YSwgY3JlYXRlZF0gPSBhd2FpdCBFcXVpZmF4QXBpUGdNb2RlbC5maW5kT3JDcmVhdGUoe1xyXG4gICAgICAgICAgICB3aGVyZToge1xyXG4gICAgICAgICAgICAgICAgaWRlbnRpZmllclR5cGUsXHJcbiAgICAgICAgICAgICAgICBpZGVudGlmaWVyVmFsdWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlZmF1bHRzOiBwcmVwYXJlZEVxdWlmYXhEYXRhXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoIWNyZWF0ZWQpIHtcclxuICAgICAgICAgICAgICAgIEVxdWlmYXhBcGlEYXRhLnVwZGF0ZShwcmVwYXJlZEVxdWlmYXhEYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHBlcnNpc3RFcXVpZmF4RGF0YSAoJHtlcnIubWVzc2FnZX0pIGApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGRhdGFGcm9tRXF1aWZheCA9IGF3YWl0IGdldERhdGFGcm9tRXF1aWZheChyZXNwb25zZSk7XHJcblxyXG5cclxuICAgIHJlcy5qc29uKHtjYWNoZWQsZXhwaXJlc09uLCByZXN1bHQ6ZGF0YUZyb21FcXVpZmF4fSk7XHJcbn0iXX0=