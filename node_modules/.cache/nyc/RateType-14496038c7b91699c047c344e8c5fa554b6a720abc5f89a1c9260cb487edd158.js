function cov_slx2fx86h(){var path="/vagrant/continuum/core/src/common/models/RateType.js";var hash="848376c598a6985e51569e74372f39ccb195655f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/vagrant/continuum/core/src/common/models/RateType.js",statementMap:{"0":{start:{line:1,column:18},end:{line:1,column:38}},"1":{start:{line:3,column:0},end:{line:28,column:2}},"2":{start:{line:14,column:2},end:{line:26,column:4}},"3":{start:{line:27,column:2},end:{line:27,column:18}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:3,column:17},end:{line:3,column:18}},loc:{start:{line:3,column:43},end:{line:28,column:1}},line:3},"1":{name:"(anonymous_1)",decl:{start:{line:10,column:4},end:{line:10,column:5}},loc:{start:{line:10,column:29},end:{line:12,column:5}},line:10}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0},f:{"0":0,"1":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"848376c598a6985e51569e74372f39ccb195655f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_slx2fx86h=function(){return actualCoverage;};}return actualCoverage;}cov_slx2fx86h();const{Model}=(cov_slx2fx86h().s[0]++,require('sequelize'));cov_slx2fx86h().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_slx2fx86h().f[0]++;class RateType extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){// define association here
cov_slx2fx86h().f[1]++;}}cov_slx2fx86h().s[2]++;RateType.init({description:DataTypes.STRING,cod:DataTypes.STRING,TMC:{type:DataTypes.BOOLEAN}},{sequelize,modelName:'RateType',timestamps:true,paranoid:true});cov_slx2fx86h().s[3]++;return RateType;};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJhdGVUeXBlLmpzIl0sIm5hbWVzIjpbIk1vZGVsIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJEYXRhVHlwZXMiLCJSYXRlVHlwZSIsImFzc29jaWF0ZSIsIm1vZGVscyIsImluaXQiLCJkZXNjcmlwdGlvbiIsIlNUUklORyIsImNvZCIsIlRNQyIsInR5cGUiLCJCT09MRUFOIiwibW9kZWxOYW1lIiwidGltZXN0YW1wcyIsInBhcmFub2lkIl0sIm1hcHBpbmdzIjoiaW5DQWVZO3lGQWZaLEtBQU0sQ0FBRUEsS0FBRiwwQkFBWUMsT0FBTyxDQUFDLFdBQUQsQ0FBbkIsQ0FBTixDLHVCQUVBQyxNQUFNLENBQUNDLE9BQVAsQ0FBaUIsQ0FBQ0MsU0FBRCxDQUFZQyxTQUFaLEdBQTBCLHdCQUN6QyxLQUFNQyxDQUFBQSxRQUFOLFFBQXVCTixDQUFBQSxLQUFNLENBQzNCO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FDSSxNQUFPTyxDQUFBQSxTQUFQLENBQWlCQyxNQUFqQixDQUF5QixDQUN2QjtBQUR1Qix1QkFFeEIsQ0FSMEIsQ0FEWSx1QkFXekNGLFFBQVEsQ0FBQ0csSUFBVCxDQUNFLENBQ0VDLFdBQVcsQ0FBRUwsU0FBUyxDQUFDTSxNQUR6QixDQUVFQyxHQUFHLENBQUVQLFNBQVMsQ0FBQ00sTUFGakIsQ0FHRUUsR0FBRyxDQUFFLENBQUVDLElBQUksQ0FBRVQsU0FBUyxDQUFDVSxPQUFsQixDQUhQLENBREYsQ0FNRSxDQUNFWCxTQURGLENBRUVZLFNBQVMsQ0FBRSxVQUZiLENBR0VDLFVBQVUsQ0FBRSxJQUhkLENBSUVDLFFBQVEsQ0FBRSxJQUpaLENBTkYsRUFYeUMsdUJBd0J6QyxNQUFPWixDQUFBQSxRQUFQLENBQ0QsQ0F6QkQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IE1vZGVsIH0gPSByZXF1aXJlKCdzZXF1ZWxpemUnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XHJcbiAgY2xhc3MgUmF0ZVR5cGUgZXh0ZW5kcyBNb2RlbCB7XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBtZXRob2QgZm9yIGRlZmluaW5nIGFzc29jaWF0aW9ucy5cclxuICAgICAqIFRoaXMgbWV0aG9kIGlzIG5vdCBhIHBhcnQgb2YgU2VxdWVsaXplIGxpZmVjeWNsZS5cclxuICAgICAqIFRoZSBgbW9kZWxzL2luZGV4YCBmaWxlIHdpbGwgY2FsbCB0aGlzIG1ldGhvZCBhdXRvbWF0aWNhbGx5LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXNzb2NpYXRlKG1vZGVscykge1xyXG4gICAgICAvLyBkZWZpbmUgYXNzb2NpYXRpb24gaGVyZVxyXG4gICAgfVxyXG4gIH1cclxuICBSYXRlVHlwZS5pbml0KFxyXG4gICAge1xyXG4gICAgICBkZXNjcmlwdGlvbjogRGF0YVR5cGVzLlNUUklORyxcclxuICAgICAgY29kOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgICBUTUM6IHsgdHlwZTogRGF0YVR5cGVzLkJPT0xFQU4gfSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHNlcXVlbGl6ZSxcclxuICAgICAgbW9kZWxOYW1lOiAnUmF0ZVR5cGUnLFxyXG4gICAgICB0aW1lc3RhbXBzOiB0cnVlLFxyXG4gICAgICBwYXJhbm9pZDogdHJ1ZSxcclxuICAgIH0sXHJcbiAgKTtcclxuICByZXR1cm4gUmF0ZVR5cGU7XHJcbn07XHJcbiJdfQ==